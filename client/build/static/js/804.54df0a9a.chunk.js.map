{"version":3,"file":"static/js/804.54df0a9a.chunk.js","mappings":"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","sources":["pages/profile-page/pages/discordClientBot/TokenEnter.tsx","pages/profile-page/pages/discordClientBot/JsonEnter.tsx","pages/profile-page/pages/discordClientBot/ResponsePreview.tsx","pages/profile-page/pages/discordClientBot/SendButton.tsx","pages/profile-page/pages/discordClientBot/Presets/presets.config.ts","pages/profile-page/pages/discordClientBot/Presets/Preset.tsx","pages/profile-page/pages/discordClientBot/Presets/Presets.tsx","pages/profile-page/pages/discordClientBot/ControlForm.tsx","pages/profile-page/pages/discordClientBot/DiscordClientBot.tsx"],"sourcesContent":["import {ChangeEvent, FC, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {ApiOutlined, CheckOutlined, InfoCircleOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport {Button, Input, Tooltip, message} from \"antd\";\r\nimport {dcbLogin} from \"../../../../utils/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setToken, removeToken} from \"../../../../store/actions/dbcActions\";\r\n\r\nconst StyledTokenEnter = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  height: 40px;\r\n`\r\n\r\nexport const TokenEnter:FC = () => {\r\n\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n  const [isSuccess, setSuccess] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.target.value);\r\n    setSuccess(false);\r\n    dispatch(removeToken());\r\n  }\r\n\r\n  const clickHandler = async () => {\r\n    setLoading(true);\r\n    const res = await dcbLogin(value);\r\n    if (res.err){\r\n      message.error(res.message);\r\n      setLoading(false);\r\n      dispatch(removeToken());\r\n    }\r\n    else{\r\n      setSuccess(true);\r\n      dispatch(setToken(value));\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  return(\r\n    <StyledTokenEnter>\r\n      <Input\r\n        value={value}\r\n        onChange={changeHandler}\r\n        size=\"large\"\r\n        placeholder=\"Введите токен клиента\"\r\n        prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n        suffix={\r\n          <Tooltip title=\"Гайд, как получить этот токен, находится на GitHub\">\r\n            <InfoCircleOutlined style={{ color: 'rgba(255,255,255,0.45)' }} />\r\n          </Tooltip>\r\n        }\r\n      />\r\n      <Button\r\n        type=\"primary\"\r\n        icon={isSuccess ? <CheckOutlined style={{ color: 'rgba(255,255,255,0.45)' }}/> : <ApiOutlined style={{ color: 'rgba(255,255,255,0.45)' }}/>}\r\n        style={{height: \"100%\"}}\r\n        loading={isLoading}\r\n        onClick={clickHandler}\r\n      >\r\n        {isSuccess ? \"Подключено\" : \"Подключится\"}\r\n      </Button>\r\n    </StyledTokenEnter>\r\n  )\r\n}","import TextArea from \"antd/lib/input/TextArea\";\r\nimport {ChangeEvent, FC, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Text} from \"../../../../components/Text\";\r\nimport {Typography} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setBody} from \"../../../../store/actions/dbcActions\";\r\nimport {RootState} from \"../../../../store/store\";\r\n\r\nconst StyledJSON = styled.div`\r\n  width: 500px; \r\n  margin: 0 0 0 20px;\r\n`\r\n\r\nexport const JsonEnter: FC = () => {\r\n\r\n  const [jsonError, setJsonError] = useState(false);\r\n\r\n  const body = useSelector<RootState>(state => state.dcb.body);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const changeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    dispatch(setBody(e.target.value));\r\n    try{\r\n      JSON.parse(e.target.value);\r\n      setJsonError(false);\r\n    } catch (err){\r\n      if (e.target.value.length === 0){\r\n        setJsonError(false);\r\n      }\r\n      setJsonError(true);\r\n    }\r\n  }\r\n\r\n  return(\r\n    <StyledJSON>\r\n      <Text style={{margin: \"10px 0\"}}>\r\n        Body (in JSON) {jsonError ? <Typography.Text type=\"danger\" style={{display: \"inline-block\"}}>Неправильный формат JSON</Typography.Text> : \"\"}\r\n      </Text>\r\n      <TextArea style={{resize: \"none\"}} value={JSON.stringify(body)} onChange={changeHandler} placeholder=\"Request body object in JSON format\" />\r\n    </StyledJSON>\r\n  )\r\n}","import {FC} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../store/store\";\r\n\r\nconst StyledResponse = styled.div`\r\n  margin: 10px 0;\r\n  height: 10%;\r\n`\r\n\r\nexport const ResponsePreview: FC = () => {\r\n\r\n  const response = useSelector<RootState>(state => state.dcb.response) as string;\r\n\r\n  return(\r\n    <StyledResponse>\r\n      <TextArea\r\n        style={{resize: \"none\"}}\r\n        placeholder=\"Discord API Response\"\r\n        disabled\r\n        value={response}\r\n      />\r\n    </StyledResponse>\r\n  )\r\n}","import React, {FC} from \"react\";\r\nimport {Button, message} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../store/store\";\r\nimport axios from \"axios\";\r\nimport {dcbSend} from \"../../../../utils/api\";\r\nimport {setResponse} from \"../../../../store/actions/dbcActions\";\r\n\r\nexport const SendButton: FC = () => {\r\n\r\n  const authToken = useSelector<RootState>(state => state.dcb.token) as string;\r\n  const endPoint = useSelector<RootState>(state => state.dcb.endpoint) as string;\r\n  const currentMethod = useSelector<RootState>(state => state.dcb.method) as string;\r\n  const currentBody = useSelector<RootState>(state => state.dcb.body) as object;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const clickHandler = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!authToken || !endPoint || !currentMethod){\r\n      message.error(\"Ошибка\");\r\n    }\r\n    else{\r\n      const res = await dcbSend(currentMethod, endPoint, currentBody, authToken);\r\n      dispatch(setResponse(res.message.message || res.message));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button size=\"large\" type=\"primary\" onClick={clickHandler}>\r\n      Отправить\r\n    </Button>\r\n  )\r\n}","export default [\r\n  {\r\n    name: \"Отправить сообщение\",\r\n    method: \"post\",\r\n    endpoint: \"channels/YOUR CHANNEL ID HERE/messages\",\r\n    body: \"{\\\"content\\\": \\\"YOUR MESSAGE HERE\\\"}\"\r\n  }\r\n];","import {FC, MouseEvent} from \"react\";\r\nimport {Button} from \"antd\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setBody, setEndPoint, setMethod} from \"../../../../../store/actions/dbcActions\";\r\n\r\ninterface Preset{\r\n  name: string,\r\n  method: string,\r\n  endpoint: string,\r\n  body: string\r\n};\r\n\r\nexport const Preset: FC<Preset> = ({name, endpoint, body, method}) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const clickHandler = (e: MouseEvent<HTMLButtonElement>) => {\r\n    dispatch(setMethod(method));\r\n    dispatch(setBody(body));\r\n    dispatch(setEndPoint(endpoint));\r\n  }\r\n\r\n  return (\r\n    <Button onClick={clickHandler} type=\"primary\" size=\"large\" style={{margin: \"10px\"}}>\r\n      {name}\r\n    </Button>\r\n  )\r\n}","import {FC} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport config from \"./presets.config\";\r\nimport {Preset} from \"./Preset\";\r\nimport {Text} from \"../../../../../components/Text\";\r\n\r\nconst StyledPresets = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Presets: FC = () => {\r\n  return (\r\n    <>\r\n      <Text style={{margin: \"10px 0\", fontSize: \"25px\", textAlign: \"center\"}}>\r\n        Presets\r\n      </Text>\r\n      <StyledPresets>\r\n        {config.map((item, index) => <Preset key={index} name={item.name} method={item.method} endpoint={item.endpoint} body={item.body}/>)}\r\n      </StyledPresets>\r\n    </>\r\n  )\r\n}","import {ChangeEvent, FC} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {TokenEnter} from \"./TokenEnter\";\r\nimport {Input, Popover, Radio} from \"antd\";\r\nimport {Text} from \"../../../../components/Text\";\r\nimport {JsonEnter} from \"./JsonEnter\";\r\nimport {ResponsePreview} from \"./ResponsePreview\";\r\nimport {SendButton} from \"./SendButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../../store/store\";\r\nimport {setEndPoint, setMethod} from \"../../../../store/actions/dbcActions\";\r\nimport {Presets} from \"./Presets/Presets\";\r\n\r\nconst StyleControlForm = styled.div`\r\n  margin: 20px 0 auto 0;\r\n`\r\n\r\nconst EndPoint = styled.div`\r\n  margin: 20px 0;\r\n`\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport const ControlForm:FC = () => {\r\n\r\n  const token = useSelector<RootState>(state => state.dcb.token);\r\n\r\n  const endPoint = useSelector<RootState>(state => state.dcb.endpoint);\r\n  const currentMethod = useSelector<RootState>(state => state.dcb.method) as string;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onMethodChange = (e: any) => {\r\n    dispatch(setMethod(e.target.value));\r\n  }\r\n\r\n  const onEndpointChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(setEndPoint(e.target.value));\r\n  }\r\n\r\n  return(\r\n    <StyleControlForm>\r\n      <TokenEnter />\r\n      {token ?\r\n        <EndPoint>\r\n          <Text style={{margin: \"10px 0\"}}>\r\n            Discord API endpoint\r\n          </Text>\r\n          <Popover content={\"Список всех endpoints - https://discord.com/developers/docs\"} trigger=\"hover\">\r\n            <Input size=\"large\" addonBefore=\"https://discord.com/api/v9/\" value={endPoint as string}\r\n                   onChange={onEndpointChange}/>\r\n          </Popover>\r\n          <Flex>\r\n            <div>\r\n              <Text style={{margin: \"10px 0\"}}>\r\n                Request Method\r\n              </Text>\r\n              <Radio.Group defaultValue=\"GET\" buttonStyle=\"solid\" onChange={onMethodChange} value={currentMethod.toUpperCase()}>\r\n                <Radio.Button value=\"GET\">GET</Radio.Button>\r\n                <Radio.Button value=\"POST\">POST</Radio.Button>\r\n                <Radio.Button value=\"PUT\">PUT</Radio.Button>\r\n                <Radio.Button value=\"PATCH\">PATCH</Radio.Button>\r\n              </Radio.Group>\r\n            </div>\r\n            {currentMethod === \"get\" ? \"\" : <JsonEnter/>}\r\n            <SendButton/>\r\n          </Flex>\r\n          <ResponsePreview/>\r\n          <Presets />\r\n        </EndPoint> :\r\n        \"\"\r\n      }\r\n    </StyleControlForm>\r\n  )\r\n}","import {FC} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Text} from \"../../../../components/Text\";\r\nimport {ControlForm} from \"./ControlForm\";\r\n\r\nconst StyledDiscordClient = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  height: 100%;\r\n`\r\n\r\nexport const DiscordClientBot: FC = () => {\r\n  return (\r\n    <StyledDiscordClient>\r\n      <div>\r\n        <Text style={{fontSize: \"2em\", textAlign: \"center\", margin: \"20px 0\"}}>\r\n          Данная фича помогает управлять обычным Discord аккаунтом через специальный токен.\r\n          Также на обычном аккаунте можно создать полноценного бота, который даже сможет реагировать на сообщения и команды.\r\n        </Text>\r\n        <Text style={{fontSize: \"1.2em\", textAlign: \"center\", margin: \"10px 0\", color: \"grayWhite\"}}>\r\n          Сдесь представлено онлайн управление таким аккаунтом. Доступ к исходникам бота у создателя сайта.\r\n        </Text>\r\n      </div>\r\n      <ControlForm />\r\n    </StyledDiscordClient>\r\n  )\r\n}"],"names":["StyledTokenEnter","styled","TokenEnter","useState","isLoading","setLoading","value","setValue","isSuccess","setSuccess","dispatch","useDispatch","clickHandler","dcbLogin","res","err","message","removeToken","setToken","onChange","e","target","size","placeholder","prefix","UserOutlined","className","suffix","title","InfoCircleOutlined","style","color","type","icon","CheckOutlined","ApiOutlined","height","loading","onClick","StyledJSON","JsonEnter","jsonError","setJsonError","body","useSelector","state","dcb","Text","margin","display","TextArea","resize","JSON","stringify","setBody","parse","length","StyledResponse","ResponsePreview","response","disabled","SendButton","authToken","token","endPoint","endpoint","currentMethod","method","currentBody","dcbSend","setResponse","name","Preset","setMethod","setEndPoint","StyledPresets","Presets","fontSize","textAlign","config","item","index","StyleControlForm","EndPoint","Flex","ControlForm","content","trigger","addonBefore","defaultValue","buttonStyle","toUpperCase","StyledDiscordClient","DiscordClientBot"],"sourceRoot":""}